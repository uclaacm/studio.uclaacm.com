import { Box, ButtonProps, SxProps, useTheme } from "@mui/material";
import IsaxIcon from "./IsaxIcon";

import DiscordIcon from "~/assets/images/icons/dev/DiscordLogo.svg";
import DiscordIconWhite from "~/assets/images/icons/dev/DiscordLogo-White.svg";
import FacebookIcon from "~/assets/images/icons/dev/facebook.svg";
import ItchIcon from "~/assets/images/icons/dev/itchio.svg";
import Image from "next/image";
import React from "react";

const isaxIconMap = {
  calendar: "isax-calendar5",
  insta: "isax-instagram5",
  email: "isax-send-15",
} as const;

const imageIconMap = {
  discord: {
    DEFAULT: DiscordIcon,
    white: DiscordIconWhite,
  },
  facebook: {
    DEFAULT: FacebookIcon,
  },
  itch: {
    DEFAULT: ItchIcon,
  },
} as const;

export type IconProps = {
  name: keyof typeof isaxIconMap | keyof typeof imageIconMap;
  color?: ButtonProps["color"] | React.CSSProperties["color"];
  sx?: SxProps;
};

export default function Icon(props: IconProps) {
  const { name, color = "primary", sx } = props;

  const theme = useTheme();
  const colorValue = color in theme.palette ? theme.palette[color].main : color;

  const sxArray = sx instanceof Array ? sx : [sx];

  if (name in isaxIconMap) {
    return (
      <IsaxIcon
        name={isaxIconMap[name]}
        sx={[{ color: colorValue }, ...sxArray]}
      />
    );
  } else if (name === "discord") {
    return (
      <Box
        component="svg"
        width="32"
        height="32"
        viewBox="0 0 32 32"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        sx={[{ width: "1em", height: "1em" }, ...sxArray]}
      >
        <Box
          component="path"
          sx={{ fill: colorValue === "inherit" ? "currentcolor" : colorValue }}
          d="M30.9388 21.7987L27.2501 7.25C27.153 6.87125 26.9475 6.52903 26.6589 6.26527C26.3703 6.0015 26.011 5.82765 25.6251 5.765L21.1176 5.025C20.6206 4.94508 20.1118 5.05283 19.6899 5.3273C19.268 5.60177 18.9633 6.02333 18.8351 6.51L18.8088 6.61625C18.7918 6.68375 18.7891 6.75406 18.8008 6.82268C18.8126 6.89129 18.8385 6.95669 18.877 7.0147C18.9155 7.07271 18.9656 7.12205 19.0243 7.15955C19.0829 7.19706 19.1488 7.2219 19.2176 7.2325C20.2519 7.3843 21.2723 7.61923 22.2688 7.935C22.5179 8.01017 22.7292 8.17729 22.8596 8.40245C22.9901 8.62762 23.03 8.89398 22.9713 9.1475C22.9376 9.27961 22.8772 9.40343 22.7938 9.51135C22.7105 9.61926 22.6059 9.70899 22.4867 9.77502C22.3674 9.84105 22.2358 9.88199 22.1001 9.89531C21.9644 9.90863 21.8274 9.89406 21.6976 9.8525C17.9998 8.71848 14.0478 8.71413 10.3476 9.84C10.0971 9.9242 9.82393 9.90871 9.58464 9.79674C9.34535 9.68478 9.15838 9.48495 9.06256 9.23875C9.01702 9.11242 8.99739 8.97821 9.00484 8.84412C9.01229 8.71004 9.04667 8.57883 9.10594 8.45832C9.1652 8.33781 9.24813 8.23047 9.34977 8.14271C9.45142 8.05495 9.5697 7.98856 9.69756 7.9475C10.7066 7.62611 11.7399 7.387 12.7876 7.2325C12.8564 7.2219 12.9222 7.19706 12.9808 7.15955C13.0395 7.12205 13.0896 7.07271 13.1281 7.0147C13.1666 6.95669 13.1925 6.89129 13.2043 6.82268C13.216 6.75406 13.2133 6.68375 13.1963 6.61625L13.1701 6.51C13.0417 6.02291 12.7366 5.60108 12.3142 5.32676C11.8917 5.05244 11.3822 4.94531 10.8851 5.02625L6.37506 5.76625C5.98928 5.82881 5.6301 6.00248 5.34148 6.266C5.05287 6.52953 4.84735 6.87148 4.75006 7.25L1.06131 21.7987C0.945653 22.2561 0.99599 22.7396 1.20337 23.1633C1.41074 23.5869 1.76171 23.9233 2.19381 24.1125L10.5688 27.8262C10.8206 27.9382 11.0927 27.9975 11.3683 28.0004C11.6438 28.0034 11.9171 27.9499 12.1713 27.8434C12.4254 27.7369 12.6551 27.5795 12.8462 27.3809C13.0373 27.1824 13.1858 26.9468 13.2826 26.6887L13.7188 25.5075C13.7448 25.4367 13.7545 25.361 13.7471 25.286C13.7397 25.211 13.7154 25.1386 13.6761 25.0743C13.6368 25.01 13.5834 24.9554 13.5201 24.9146C13.4567 24.8738 13.3849 24.8479 13.3101 24.8387C12.0957 24.6917 10.8977 24.4323 9.73131 24.0637C9.4832 23.9883 9.2729 23.8217 9.14277 23.5974C9.01264 23.3731 8.97237 23.1078 9.03006 22.855C9.0635 22.7225 9.12373 22.5983 9.20704 22.49C9.29035 22.3817 9.39497 22.2916 9.51445 22.2253C9.63392 22.159 9.76572 22.1179 9.90169 22.1045C10.0377 22.0911 10.175 22.1058 10.3051 22.1475C14.0167 23.2842 17.9835 23.2842 21.6951 22.1475C21.825 22.1059 21.9621 22.0914 22.0978 22.1048C22.2336 22.1182 22.3652 22.1593 22.4845 22.2254C22.6038 22.2916 22.7083 22.3815 22.7916 22.4895C22.8749 22.5976 22.9352 22.7215 22.9688 22.8537C23.0272 23.1068 22.9872 23.3725 22.857 23.5972C22.7268 23.8218 22.5161 23.9886 22.2676 24.0637C21.1016 24.4324 19.904 24.6918 18.6901 24.8387C18.6152 24.8479 18.5434 24.8738 18.4801 24.9146C18.4167 24.9554 18.3633 25.01 18.324 25.0743C18.2847 25.1386 18.2604 25.211 18.253 25.286C18.2457 25.361 18.2553 25.4367 18.2813 25.5075L18.7176 26.6887C18.8144 26.9467 18.963 27.1821 19.1541 27.3806C19.3453 27.579 19.5749 27.7364 19.8291 27.8429C20.0832 27.9494 20.3564 28.0029 20.6319 28C20.9074 27.9971 21.1795 27.938 21.4313 27.8262L29.8063 24.1125C30.2384 23.9233 30.5894 23.5869 30.7967 23.1633C31.0041 22.7396 31.0545 22.2561 30.9388 21.7987ZM11.5001 19C11.2034 19 10.9134 18.912 10.6667 18.7472C10.42 18.5824 10.2278 18.3481 10.1142 18.074C10.0007 17.7999 9.971 17.4983 10.0289 17.2074C10.0868 16.9164 10.2296 16.6491 10.4394 16.4393C10.6492 16.2296 10.9165 16.0867 11.2074 16.0288C11.4984 15.9709 11.8 16.0006 12.0741 16.1142C12.3482 16.2277 12.5824 16.42 12.7473 16.6666C12.9121 16.9133 13.0001 17.2033 13.0001 17.5C13.0001 17.8978 12.842 18.2794 12.5607 18.5607C12.2794 18.842 11.8979 19 11.5001 19ZM20.5001 19C20.2034 19 19.9134 18.912 19.6667 18.7472C19.42 18.5824 19.2278 18.3481 19.1142 18.074C19.0007 17.7999 18.971 17.4983 19.0289 17.2074C19.0868 16.9164 19.2296 16.6491 19.4394 16.4393C19.6492 16.2296 19.9165 16.0867 20.2074 16.0288C20.4984 15.9709 20.8 16.0006 21.0741 16.1142C21.3482 16.2277 21.5824 16.42 21.7473 16.6666C21.9121 16.9133 22.0001 17.2033 22.0001 17.5C22.0001 17.8978 21.842 18.2794 21.5607 18.5607C21.2794 18.842 20.8979 19 20.5001 19Z"
        />
      </Box>
    );
  } else if (name in imageIconMap) {
    const icon = imageIconMap[name];
    return (
      <Box
        component={Image}
        src={icon}
        alt=""
        width="32"
        sx={[...(sx instanceof Array ? sx : [sx])]}
      />
    );
  }
}
